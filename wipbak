#!/usr/bin/env bash

# ---------------------------------------------------------------------
#  wipbak.sh
#  Work-in-progress backup script.
#  Modified 2021-10-03.
#
#  Put this script in a directory that is in the PATH.  For example,
#  if this script is in a 'bin' directory under the home directory,
#  add this to .bashrc:
#    export PATH=$PATH:$HOME/bin
#
#  To use this script, the directory where it is to be run must have:
#  1. A file named 'wipbak-list.txt' that contains the names of files
#     for which backup copies are to be made.
#  2. A sub-directory named '_0_bak' where the copies will be placed.
#
# ---------------------------------------------------------------------


VERSION="211003.1"

LISTFILE="wipbak-list.txt"

BAKDIR="_0_bak"

TIMESTAMP="$(date +%Y%m%d_%H%M%S)"

VERBOSE=


function bakwip
{
    dt="$1"
    wip="$2"
    if [ ! -e "$wip" ]; then
        printf "\nERROR: File not found: ${wip}\n"
        printf "Make sure $LISTFILE is up to date.\n\n"
        exit 1
    fi
    
    printf "'${wip}' "

    pattern="/${wip//./\\.}\.[0-9]{8}_[0-9]{6}\.bak"

    if [ "$VERBOSE" ]; then
        printf "\n  Pattern: '${pattern}'\n"
    fi

    prevbak=$(find ./${BAKDIR} -maxdepth 1 -type f | grep -P "${pattern}" | sort -r | head -n1)

    if [ -z "${prevbak}" ]; then
        printf "\n  No previous backup.\n"
    else
        if [ "$VERBOSE" ]; then
            printf "\n  Previous backup: '${prevbak}'\n"
        fi
        diffresult=$(diff -q "${prevbak}" "${wip}")
        if [ -z "${diffresult}" ]; then
            printf "(same)\n"
            return
        else
            printf "\n"
        fi
    fi
    bak="./_0_bak/${wip}.${dt}.bak"
    printf "  Copy to ${bak}\n"
    cp "$wip" "$bak"
    chmod 400 "$bak"
}

printf "\nwipbak (version ${VERSION})\n\n"

while getopts 'v' OPT
do
    case $OPT in
        v)  VERBOSE=1
            ;;
        ?)  printf "Usage: wipbak [-v]\nWhere: -v = Verbose.\n\n"
            exit 2
            ;;
    esac
done

if [ ! -e "./${LISTFILE}" ]; then
    printf "\nList file '${LISTFILE}' not found in current directory.\n"
    exit 1
fi

if [ ! -d "./${BAKDIR}" ]; then
    printf "\nBackup directory '${BAKDIR}' not found in current directory.\n"
    exit 1
fi

for filename in $(cat "$LISTFILE")
do
    bakwip "$TIMESTAMP" "$filename"
done

printf "\n"
read -t7 -n1 -r -p "Press [Enter] to continue (or wait for timeout). "
printf "\n\nListing files in ${BAKDIR} (most recent last):\n"

ls -tr1 "./${BAKDIR}"
